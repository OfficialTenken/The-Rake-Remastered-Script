--[[ good luck skiddy LOL --]]
do local _old_print, _old_warn = print, (warn or function() end); print = function() end; if warn then warn = function() end end; pcall(function() if type(os)=="table" and type(os.getenv)=="function" then local _old_getenv=os.getenv; os.getenv=function() return nil end end end) end
do pcall(function() if debug then debug.getinfo=nil;debug.getupvalue=nil;debug.setupvalue=nil;debug.setlocal=nil;debug.getlocal=nil;debug.getregistry=nil;debug.debug=nil end end);pcall(function() if getfenv then local e=getfenv(0);for k,v in pairs(e)do if type(v)=="function"and(k=="loadstring"or k=="load")then e[k]=function()return nil end end end end end) end
return(function(...)local DG={}local function YG(l)return DG[l+54977]end for l,e in ipairs({{1;276},{1,76},{77,276}})do while e[1]<e[2]do DG[e[1]],DG[e[2]],e[1],e[2]=DG[e[2]],DG[e[1]],e[1]+1,e[2]-1 end end do local l=string.len local e=math.floor local y=table.concat local d={["\048"]=10,E=18;e=44,u=13,C=27;["\055"]=12,["\052"]=34,f=1,j=22;g=58;q=53,V=25,d=31,["\054"]=50;H=40;["\047"]=47,x=48;["\049"]=49,t=2;h=7;b=17;l=33;y=20;p=38,X=16;K=5;I=54;r=62,D=6,a=4;["\053"]=59,v=57,Y=23;J=45,s=36,N=42,G=8;z=11;k=60,T=14,S=37;P=41;c=51;L=46,["\056"]=52,o=15,R=43;B=0,Q=30,A=61,["\043"]=24;W=29;M=3,O=35;w=63,n=39,["\050"]=56,["\051"]=21;["\057"]=9,F=32,Z=28;U=19,m=26;i=55}local F=string.char local s=string.sub local t=type local f=table.insert local k=DG for z=1,#k,1 do local S=k[z]if t(S)=="\115\116\114\105\110\103"then local t=l(S)local W={}local n=1 local v=0 local Q=0 while n<=t do local l=s(S,n,n)local y=d[l]if y then v=v+y*64^(3-Q)Q=Q+1 if Q==4 then Q=0 local l=e(v/65536)local y=e((v%65536)/256)local d=v%256 f(W,F(l,y,d))v=0 end elseif l=="\061"then f(W,F(e(v/65536)))if n>=t or s(S,n+1,n+1)~="\061"then f(W,F(e((v%65536)/256)))end break end n=n+1 end k[z]=y(W)end end end local function l(l)local e=game[YG(-54976)]local y=cloneref or function(l)return l end return y(e(game,l))end if syn then(l(YG(-54975))):SetCore(YG(-54974),{[YG(-54973)]=YG(-54972);[YG(-54971)]=YG(-54970),[YG(-54969)]=5})else(l(YG(-54975))):SetCore(YG(-54974),{[YG(-54973)]=YG(-54972),[YG(-54971)]=YG(-54970),[YG(-54969)]=5})end local e=game:GetService(YG(-54968))local y=game:GetService(YG(-54967))local d=game:GetService(YG(-54966))local F=game:GetService(YG(-54965))local s=game:GetService(YG(-54964))local t=game:GetService(YG(-54963))local f=game:GetService(YG(-54962))local k=e[YG(-54961)]local z=getexecutorname()or identifyexecutor()if z then local l={YG(-54960),YG(-54959);YG(-54958);YG(-54957);YG(-54956),YG(-54955)}local e=false for l,y in ipairs(l)do if string[YG(-54954)](z,y)then e=true break end end if e then print(YG(-54953))else game[YG(-54968)][YG(-54961)]:Kick(YG(-54952))end end local S if identifyexecutor then S=identifyexecutor()elseif getexecutorname then S=getexecutorname()end repeat task[YG(-54951)]()until k local W=(loadstring(game:HttpGet(YG(-54950))))()local n=W:CreateWindow({[YG(-54949)]=YG(-54948),[YG(-54947)]=0;[YG(-54946)]=YG(-54945),[YG(-54944)]=YG(-54943),[YG(-54942)]=YG(-54941);[YG(-54940)]=YG(-54939);[YG(-54938)]=YG(-54937),[YG(-54936)]={[YG(-54935)]=true,[YG(-54934)]=YG(-54933),[YG(-54932)]=YG(-54933)};[YG(-54931)]={[YG(-54935)]=true,[YG(-54930)]=YG(-54929),[YG(-54928)]=true},[YG(-54927)]=true;[YG(-54926)]={[YG(-54973)]=YG(-54925),[YG(-54924)]=YG(-54923),[YG(-54922)]=YG(-54921);[YG(-54932)]=YG(-54920);[YG(-54919)]=false;[YG(-54918)]=false;[YG(-54917)]={YG(-54916)}}})local v=n:CreateTab(YG(-54915))v:CreateButton({[YG(-54949)]=YG(-54914),[YG(-54913)]=function()s:TeleportToPlaceInstance(game[YG(-54912)],game[YG(-54911)],k)end})v:CreateButton({[YG(-54949)]=YG(-54910),[YG(-54913)]=function()local l={}local e,y=pcall(function()return game:HttpGet(YG(-54909)..(game[YG(-54912)]..YG(-54908)))end)if not e then return end local d=t:JSONDecode(y)if d and d[YG(-54907)]then for e,y in pairs(d[YG(-54907)])do if y[YG(-54906)]<y[YG(-54905)]and y[YG(-54904)]~=game[YG(-54911)]then table[YG(-54903)](l,y[YG(-54904)])end end end if#l>0 then s:TeleportToPlaceInstance(game[YG(-54912)],l[math[YG(-54902)](1,#l)],k)else W:Notify({[YG(-54973)]=YG(-54910);[YG(-54901)]=YG(-54900);[YG(-54969)]=3})end end})local Q=n:CreateTab(YG(-54899))local p=false local function I()pcall(function()k[YG(-54898)]=.5 k[YG(-54897)]=.5 k[YG(-54896)]=false k[YG(-54895)]=Enum[YG(-54894)][YG(-54939)]end)end local function x()pcall(function()k[YG(-54897)]=.5 k[YG(-54898)]=30 k[YG(-54896)]=true k[YG(-54895)]=Enum[YG(-54894)][YG(-54893)]end)end local function O()if p then x()end end Q:CreateToggle({[YG(-54949)]=YG(-54892),[YG(-54891)]=false;[YG(-54890)]=YG(-54889);[YG(-54913)]=function(l)p=l if l then x();(k:GetPropertyChangedSignal(YG(-54898))):Connect(O);(k:GetPropertyChangedSignal(YG(-54897))):Connect(O)else I()end end})k[YG(-54888)]:Connect(function()task[YG(-54951)](.5)if p then x()else I()end end)local P=false local u={}local q=false local m local function C()if q then return end q=true u[YG(-54887)]=F[YG(-54887)]u[YG(-54886)]=F[YG(-54886)]u[YG(-54885)]=F[YG(-54885)]u[YG(-54884)]=F[YG(-54884)]u[YG(-54883)]=F[YG(-54883)]u[YG(-54882)]=F[YG(-54882)]u[YG(-54881)]=F[YG(-54881)]u[YG(-54880)]=F[YG(-54880)]end local function M()pcall(function()F[YG(-54887)]=2 F[YG(-54886)]=14 F[YG(-54885)]=1000000000 F[YG(-54884)]=false F[YG(-54883)]=Color3[YG(-54879)](1,1,1)F[YG(-54882)]=Color3[YG(-54879)](1,1,1)F[YG(-54881)]=Color3[YG(-54879)](1,1,1)F[YG(-54880)]=Color3[YG(-54879)](1,1,1)end)for l,e in ipairs(F:GetChildren())do pcall(function()if e:IsA(YG(-54878))then if e[YG(-54877)]then e[YG(-54877)]=0 end if e[YG(-54876)]then e[YG(-54876)]=0 end e[YG(-54875)]=Color3[YG(-54879)](1,1,1)if e[YG(-54874)]then e[YG(-54874)]=0 end if e[YG(-54873)]then e[YG(-54873)]=0 end elseif e:IsA(YG(-54872))or e:IsA(YG(-54871))or e:IsA(YG(-54870))or e:IsA(YG(-54869))or e:IsA(YG(-54868))then if e[YG(-54935)]~=nil then e[YG(-54935)]=false end end end)end end Q:CreateToggle({[YG(-54949)]=YG(-54867),[YG(-54891)]=false;[YG(-54890)]=YG(-54866);[YG(-54913)]=function(l)P=l if l then C()M()m=y[YG(-54865)]:Connect(function()if P then M()end end)else if m then m:Disconnect()m=nil end pcall(function()for l,e in pairs(u)do F[l]=e end end)end end})local J=false local G={}local function i()for l,e in ipairs(G)do pcall(function()e:Disconnect()end)end G={}end local function L(l)local e=l:FindFirstChildOfClass(YG(-54864))or l:WaitForChild(YG(-54864),5)local d=l:FindFirstChild(YG(-54863))or l:FindFirstChild(YG(-54862))if not e or not d then return end local F=e[YG(-54861)]local s=Enum[YG(-54860)][YG(-54859)]local t local function f()if not(d and(d[YG(-54858)]and(e and e[YG(-54858)])))then return end local l=d[YG(-54857)][YG(-54856)]if l<-50 then local l=Instance[YG(-54879)](YG(-54855))l[YG(-54854)]=Vector3[YG(-54879)](0,100000,0)l[YG(-54853)]=3000 l[YG(-54857)]=Vector3[YG(-54879)](0,-30,0)l[YG(-54858)]=d task[YG(-54852)](.15,function()pcall(function()l:Destroy()end)end)end end local k=e[YG(-54851)]:Connect(function(l,d)s=d if d==Enum[YG(-54860)][YG(-54850)]then F=e[YG(-54861)]if t then pcall(function()t:Disconnect()end)end t=y[YG(-54849)]:Connect(function()if J then f()end end)elseif d==Enum[YG(-54860)][YG(-54848)]then if t then pcall(function()t:Disconnect()end)end task[YG(-54852)](.03,function()if J and e[YG(-54861)]<F then e[YG(-54861)]=F end end)end end)local z=e[YG(-54847)]:Connect(function()if J and(s==Enum[YG(-54860)][YG(-54848)]and e[YG(-54861)]<F)then e[YG(-54861)]=F end end)table[YG(-54903)](G,k)table[YG(-54903)](G,z)end local function K()if J then return end J=true if k[YG(-54846)]then L(k[YG(-54846)])end local l=k[YG(-54888)]:Connect(function(l)task[YG(-54951)](.35)if J then L(l)end end)table[YG(-54903)](G,l)W:Notify({[YG(-54973)]=YG(-54845),[YG(-54901)]=YG(-54935);[YG(-54969)]=3})end local function c()J=false i()W:Notify({[YG(-54973)]=YG(-54845),[YG(-54901)]=YG(-54844),[YG(-54969)]=3})end Q:CreateToggle({[YG(-54949)]=YG(-54845),[YG(-54891)]=false,[YG(-54890)]=YG(-54843),[YG(-54913)]=function(l)if l then K()else c()end end})local D=Q:CreateParagraph({[YG(-54973)]=YG(-54842),[YG(-54901)]=YG(-54841)})local Y=false local E={}local w=16 local V=30 local function Z()for l,e in ipairs(E)do pcall(function()e:Disconnect()end)end E={}end local function b(l)local e=l:FindFirstChildOfClass(YG(-54864))or l:WaitForChild(YG(-54864),5)if not e then return end local d=e:FindFirstChild(YG(-54840))or e:FindFirstChild(YG(-54839))local F=y[YG(-54865)]:Connect(function()if Y then if e and e[YG(-54858)]then e[YG(-54838)]=V if d then pcall(function()d[YG(-54837)]=d[YG(-54836)]or 100 end)end end else if e and e[YG(-54858)]then e[YG(-54838)]=w end end end)table[YG(-54903)](E,F)end local function X()if Y then return end Y=true if k[YG(-54846)]then b(k[YG(-54846)])end local l=k[YG(-54888)]:Connect(function(l)task[YG(-54951)](.2)if Y then b(l)end end)table[YG(-54903)](E,l)W:Notify({[YG(-54973)]=YG(-54835),[YG(-54901)]=YG(-54935);[YG(-54969)]=3})end local function B()Y=false Z()if k[YG(-54846)]then local l=k[YG(-54846)]:FindFirstChildOfClass(YG(-54864))if l then l[YG(-54838)]=w end end W:Notify({[YG(-54973)]=YG(-54835),[YG(-54901)]=YG(-54844),[YG(-54969)]=3})end Q:CreateToggle({[YG(-54949)]=YG(-54835),[YG(-54891)]=false,[YG(-54890)]=YG(-54834);[YG(-54913)]=function(l)if l then X()else B()end end})local h=Q:CreateSection(YG(-54833))local N=Q:CreateToggle({[YG(-54949)]=YG(-54832);[YG(-54891)]=false;[YG(-54890)]=YG(-54831);[YG(-54913)]=function(e)_G[YG(-54830)]=e W:Notify({[YG(-54973)]=YG(-54832);[YG(-54901)]=YG(-54829)..tostring(_G[YG(-54830)]);[YG(-54969)]=1,[YG(-54828)]=4483362458})if _G[YG(-54830)]==true then repeat wait()pcall(function()for e,y in pairs((l(YG(-54827))):GetChildren())do if(l(YG(-54827))):FindFirstChild(YG(-54826))then if((l(YG(-54827)))[YG(-54826)][YG(-54863)][YG(-54825)]-(l(YG(-54968)))[YG(-54961)][YG(-54846)][YG(-54863)][YG(-54825)])[YG(-54824)]<300 then(l(YG(-54968)))[YG(-54961)][YG(-54846)][YG(-54823)][YG(-54822)]:FireServer(YG(-54821))wait();(l(YG(-54968)))[YG(-54961)][YG(-54846)][YG(-54823)][YG(-54822)]:FireServer(YG(-54820),workspace[YG(-54826)][YG(-54863)])end end end wait(.1)end)until _G[YG(-54830)]==false end end});(l(YG(-54967)))[YG(-54849)]:Connect(function()if AllowRunService==true then if _G[YG(-54830)]==true then pcall(function()if(l(YG(-54827))):FindFirstChild(YG(-54826))then(l(YG(-54968)))[YG(-54961)][YG(-54846)][YG(-54823)][YG(-54819)][YG(-54825)]=((l(YG(-54827))):FindFirstChild(YG(-54826)))[YG(-54863)][YG(-54825)]end end)end end end)Q:CreateButton({[YG(-54949)]=YG(-54818);[YG(-54913)]=function()for e,y in pairs((l(YG(-54827)))[YG(-54817)][YG(-54816)]:GetDescendants())do if y[YG(-54949)]:lower()==YG(-54815)then y:PivotTo((l(YG(-54968)))[YG(-54961)][YG(-54846)]:GetPivot())end end end})local r=n:CreateTab(YG(-54814))local T=AutofarmTab:CreateParagraph({[YG(-54973)]=YG(-54813);[YG(-54901)]=YG(-54812)})local j=game:GetService(YG(-54965))local a=game:GetService(YG(-54967))local A=game:GetService(YG(-54968))local o=game:GetService(YG(-54966))local g={[YG(-54811)]=50;[YG(-54810)]=20;[YG(-54809)]=40,[YG(-54808)]=2,[YG(-54807)]=.01;[YG(-54806)]=.05,[YG(-54805)]=200,[YG(-54804)]=10;[YG(-54803)]=.05,[YG(-54802)]=.1;[YG(-54801)]=5;[YG(-54800)]=-10,[YG(-54799)]={Vector3[YG(-54879)](5,0,5);Vector3[YG(-54879)](-5,0,5),Vector3[YG(-54879)](5,0,-5),Vector3[YG(-54879)](-5,0,-5)}}local H={[YG(-54798)]=false;[YG(-54797)]={},[YG(-54796)]=nil,[YG(-54795)]=nil}local function R()for l,e in ipairs(H[YG(-54797)])do e:Disconnect()end table[YG(-54794)](H[YG(-54797)])end local function U(l,e)local y=l+Vector3[YG(-54879)](0,g[YG(-54801)],0)local d=Vector3[YG(-54879)](0,g[YG(-54800)],0)local F=workspace:FindPartOnRayWithIgnoreList(Ray[YG(-54879)](y,d),{e[YG(-54846)]})if not F then return l end for y,F in ipairs(g[YG(-54799)])do local s=l+F local t=s+Vector3[YG(-54879)](0,g[YG(-54801)],0)local f=workspace:FindPartOnRayWithIgnoreList(Ray[YG(-54879)](t,d),{e[YG(-54846)]})if not f then return s end end return l+Vector3[YG(-54879)](0,2,0)end local function lG()local l=workspace:FindFirstChild(YG(-54826))H[YG(-54795)]=l and l:FindFirstChild(YG(-54863))return H[YG(-54795)]~=nil end local function eG(l)local e=l[YG(-54846)]if not e then return end local y=e:FindFirstChild(YG(-54863))local d=e:FindFirstChildOfClass(YG(-54864))if not(y and d)then return end if d[YG(-54793)]then d[YG(-54792)]=false task[YG(-54951)](.0001)end if not(H[YG(-54795)]and H[YG(-54795)]:IsDescendantOf(workspace))then return end local F=H[YG(-54795)][YG(-54825)]local s=y[YG(-54825)]local t=(F-s)[YG(-54824)]if t<=g[YG(-54811)]then local e=math[YG(-54791)](g[YG(-54809)],math[YG(-54790)](g[YG(-54810)],t*.75))local f=(s-F)[YG(-54789)]local k=s+f*e local z=U(k,l)local S=CFrame[YG(-54879)](z,F)local W=t<g[YG(-54804)]and g[YG(-54803)]or g[YG(-54802)]y[YG(-54788)]=y[YG(-54788)]:Lerp(S,W)d:MoveTo(z)local n=math[YG(-54790)](g[YG(-54807)],math[YG(-54791)](g[YG(-54806)],t/g[YG(-54805)]))task[YG(-54951)](n)end end local function yG()local l=workspace[YG(-54787)]:Connect(function(l)if l[YG(-54949)]==YG(-54826)then task[YG(-54951)]()lG()end end)table[YG(-54903)](H[YG(-54797)],l)workspace[YG(-54786)]:Connect(function(l)if l[YG(-54949)]==YG(-54826)then H[YG(-54795)]=nil end end)table[YG(-54903)](H[YG(-54797)],l)end local function dG(l)if H[YG(-54798)]==l then return end H[YG(-54798)]=l local e=A[YG(-54961)]if l then local l=e[YG(-54846)]and e[YG(-54846)]:FindFirstChildOfClass(YG(-54864))if l then H[YG(-54796)]=l[YG(-54838)]l[YG(-54838)]=H[YG(-54796)]*g[YG(-54808)]end lG()yG()local y=a[YG(-54849)]:Connect(function()if H[YG(-54798)]then eG(e)end end)table[YG(-54903)](H[YG(-54797)],y)else R()local l=e[YG(-54846)]and e[YG(-54846)]:FindFirstChildOfClass(YG(-54864))if l and H[YG(-54796)]then l[YG(-54838)]=H[YG(-54796)]end end end local FG=AutofarmTab:CreateToggle({[YG(-54949)]=YG(-54785),[YG(-54891)]=false;[YG(-54890)]=YG(-54784),[YG(-54913)]=function(l)dG(l)end})local sG=AutofarmTab:CreateParagraph({[YG(-54973)]=YG(-54783),[YG(-54901)]=YG(-54782)})local tG=game:GetService(YG(-54968))local fG=game:GetService(YG(-54827))local kG=tG[YG(-54961)]local zG={}local SG={}local WG={YG(-54968),YG(-54826);YG(-54781),YG(-54780);YG(-54779)}local nG={[YG(-54968)]=Color3[YG(-54778)](0,255,0),[YG(-54826)]=Color3[YG(-54778)](255,0,0);[YG(-54781)]=Color3[YG(-54778)](255,165,0);[YG(-54780)]=Color3[YG(-54778)](0,191,255);[YG(-54779)]=Color3[YG(-54778)](251,255,0)}local function vG(l,e,y)if not l or not l:IsA(YG(-54777))then return nil end local d=Instance[YG(-54879)](YG(-54776))d[YG(-54775)]=UDim2[YG(-54879)](0,70,0,14)d[YG(-54774)]=Vector3[YG(-54879)](0,2.6,0)d[YG(-54773)]=true d[YG(-54772)]=l d[YG(-54858)]=l local F=Instance[YG(-54879)](YG(-54771))F[YG(-54775)]=UDim2[YG(-54879)](1,0,1,0)F[YG(-54770)]=1 F[YG(-54769)]=y F[YG(-54768)]=Enum[YG(-54768)][YG(-54767)]F[YG(-54766)]=true F[YG(-54765)]=0 F[YG(-54971)]=e or YG(-54953)F[YG(-54858)]=d return d end local function QG(l)if not l then return nil,nil end if l:IsA(YG(-54764))then local e=l[YG(-54763)]or l:FindFirstChild(YG(-54863))or l:FindFirstChild(YG(-54762))or l:FindFirstChildWhichIsA(YG(-54777))return l,e elseif l:IsA(YG(-54761))then local e=l:FindFirstChild(YG(-54762))or l:FindFirstChildWhichIsA(YG(-54777))if e then if l[YG(-54858)]and l[YG(-54858)]:IsA(YG(-54764))then local y=l[YG(-54858)]local d=y[YG(-54763)]or e return y,d else return l,e end end elseif l:IsA(YG(-54777))then local e=l:FindFirstAncestorWhichIsA(YG(-54764))if e then return e,l else return l,l end end local e=l:FindFirstAncestorWhichIsA(YG(-54764))if e then local l=e[YG(-54763)]or e:FindFirstChildWhichIsA(YG(-54777))return e,l end return nil,nil end local function pG(l)if not l then return end local e=SG[l]if not e then return end pcall(function()if e[YG(-54760)]and e[YG(-54760)][YG(-54858)]then e[YG(-54760)]:Destroy()end end)pcall(function()if e[YG(-54759)]and e[YG(-54759)][YG(-54858)]then e[YG(-54759)]:Destroy()end end)if e[YG(-54758)]then pcall(function()e[YG(-54758)]:Disconnect()end)end SG[l]=nil end local function IG(l,e,y)if not l or not e then return end local d,F=QG(l)local s=d or l if not s then return end if SG[s]then return end local t,f=pcall(function()local y=Instance[YG(-54879)](YG(-54760))y[YG(-54772)]=d or l y[YG(-54757)]=nG[e]or Color3[YG(-54879)](1,1,1)y[YG(-54756)]=Color3[YG(-54879)](0,0,0)y[YG(-54755)]=.5 y[YG(-54754)]=Enum[YG(-54753)][YG(-54773)]if d and d:IsA(YG(-54764))then y[YG(-54858)]=d elseif l[YG(-54858)]then y[YG(-54858)]=l else y[YG(-54858)]=fG end return y end)if not t then return end local k if F and F:IsA(YG(-54777))then k=vG(F,y or e,nG[e]or Color3[YG(-54879)](1,1,1))end local z pcall(function()z=s[YG(-54752)]:Connect(function(l,e)if not e then pG(s)end end)end)SG[s]={[YG(-54760)]=f;[YG(-54759)]=k,[YG(-54751)]=e,[YG(-54758)]=z}end local function xG(l,e)if not l then return nil end local y,d=pcall(function()local y=l:FindFirstChild(e)if y and(y:IsA(YG(-54750))or y:IsA(YG(-54749))or y:IsA(YG(-54748)))then return y[YG(-54837)]elseif y and y[YG(-54837)]~=nil then return y[YG(-54837)]end return nil end)if y then return d end return nil end local function OG()if zG[YG(-54968)]then for l,e in ipairs(tG:GetPlayers())do if e~=kG and e[YG(-54846)]then IG(e[YG(-54846)],YG(-54968),e[YG(-54949)])end end end if zG[YG(-54826)]then local l=fG:FindFirstChild(YG(-54826))if l then IG(l,YG(-54826),YG(-54826))end end if zG[YG(-54781)]then local l={}for e,y in ipairs(fG:GetDescendants())do if y and y[YG(-54949)]then local e=y[YG(-54949)]:lower()if y:IsA(YG(-54761))and e:find(YG(-54747))then local e=y[YG(-54858)]and(y[YG(-54858)]:IsA(YG(-54764))and y[YG(-54858)])or y if not l[e]then IG(y,YG(-54781),YG(-54781))l[e]=true end elseif y:IsA(YG(-54764))and e:find(YG(-54747))then if not l[y]then IG(y,YG(-54781),YG(-54781))l[y]=true end elseif y:IsA(YG(-54777))and e:find(YG(-54747))then local e=y:FindFirstAncestorWhichIsA(YG(-54764))or y if not l[e]then IG(e,YG(-54781),YG(-54781))l[e]=true end end end end end if zG[YG(-54780)]then local l=fG:FindFirstChild(YG(-54817))if l and l:FindFirstChild(YG(-54816))then for l,e in ipairs(l[YG(-54816)]:GetDescendants())do if e and e:IsA(YG(-54777))then local l=e[YG(-54949)]:lower()if l:find(YG(-54815))then local l=e:FindFirstAncestorWhichIsA(YG(-54764))or e local y=YG(-54780)local d=xG(l,YG(-54746))local F=xG(l,YG(-54745))if d or F then d=d and tostring(d)or YG(-54744)F=F and tostring(F)or YG(-54744)y=YG(-54743)..(d..(YG(-54742)..F))end IG(l,YG(-54780),y)end end end end end if zG[YG(-54779)]then local l=fG:FindFirstChild(YG(-54962))if l and l:FindFirstChild(YG(-54741))then for l,e in ipairs(l[YG(-54741)]:GetChildren())do if e then if e[YG(-54949)]==YG(-54740)or(e[YG(-54949)]:lower()):find(YG(-54739))or e:FindFirstChild(YG(-54738))then IG(e,YG(-54779),YG(-54779))end end end end end end local PG=n:CreateTab(YG(-54737))PG:CreateDropdown({[YG(-54949)]=YG(-54736);[YG(-54735)]=WG,[YG(-54734)]={},[YG(-54733)]=true,[YG(-54890)]=YG(-54732);[YG(-54913)]=function(l)zG={}for l,e in ipairs(l)do zG[e]=true end for l,e in pairs(SG)do if not zG[e[YG(-54751)]]then pG(l)end end OG()end})tG[YG(-54731)]:Connect(function(l)l[YG(-54888)]:Connect(function()if zG[YG(-54968)]then task[YG(-54951)](1)IG(l[YG(-54846)],YG(-54968),l[YG(-54949)])end end)end)tG[YG(-54730)]:Connect(function(l)if l and l[YG(-54846)]then pG(l[YG(-54846)])end end)fG[YG(-54787)]:Connect(function()task[YG(-54951)](1)OG()end)local uG=PG:CreateParagraph({[YG(-54973)]=YG(-54729),[YG(-54901)]=YG(-54728)})local qG=n:CreateTab(YG(-54727),nil)local mG={[YG(-54939)]=YG(-54939);[YG(-54726)]=YG(-54725),[YG(-54724)]=YG(-54724),[YG(-54723)]=YG(-54723);[YG(-54722)]=YG(-54721);[YG(-54720)]=YG(-54720),[YG(-54719)]=YG(-54719);[YG(-54718)]=YG(-54718),[YG(-54717)]=YG(-54717)}local CG=YG(-54939)local MG=qG:CreateDropdown({[YG(-54949)]=YG(-54716);[YG(-54735)]={YG(-54939),YG(-54726);YG(-54724);YG(-54723),YG(-54722);YG(-54720),YG(-54719);YG(-54718),YG(-54717)},[YG(-54734)]=CG,[YG(-54890)]=YG(-54715);[YG(-54913)]=function(l)local e=type(l)==YG(-54714)and l[1]or l print(YG(-54713),e)local y=mG[e]or e print(YG(-54712),y)if type(n[YG(-54711)])==YG(-54710)then n[YG(-54711)](y)elseif type(n[YG(-54711)])==YG(-54710)then n:ModifyTheme(y)else warn(YG(-54709))end end})local JG=n:CreateTab(YG(-54708),nil)local GG=JG:CreateSection(YG(-54707))local iG=JG:CreateSection(YG(-54706))local LG=JG:CreateSection(YG(-54705))local KG=JG:CreateButton({[YG(-54949)]=YG(-54704),[YG(-54913)]=function()setclipboard(YG(-54703))end})local cG=JG:CreateButton({[YG(-54949)]=YG(-54702);[YG(-54913)]=function()setclipboard(YG(-54701))end})end)(...)
